generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  password    String      @db.Text
  verified    Boolean     @default(false)
  declined    Boolean     @default(false)
  givenName   String
  middleName  String?
  familyName  String
  gender      Gender
  birthdate   DateTime
  birthplace  String
  phone       String
  occupation  String
  homeowner   Boolean
  voter       Boolean
  code        String?
  proof       String?
  head        Boolean     @default(false)
  fullAddress String      @default("Dasmarinas,Cavite")
  purok       Purok       @default(PUROK_1)
  households  Household[]
  requests    Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id       String    @id @default(cuid())
  status   Status    @default(PENDING)
  purpose  String?
  document Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)

  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  adminId    String?
  documentId String?
}

model Document {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Int
  requests    Request[]
}

model Household {
  id           String       @id @default(cuid())
  givenName    String
  middleName   String?
  familyName   String
  gender       Gender
  birthdate    DateTime
  birthplace   String
  phone        String
  occupation   String
  head         Boolean      @default(false)
  relationship Relationship

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([id, userId])
}

model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String @db.Text
  name     String
}

model Signatory {
  id         String @id @default(cuid())
  firstName  String
  middleName String
  lastName   String
}

enum Gender {
  MALE
  FEMALE
}

enum Relationship {
  FATHER
  MOTHER
  SON
  DAUGHTER
  HUSBAND
  WIFE
  BROTHER
  SISTER
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  UNCLE
  AUNT
  NEWPHEW
  NIECE
  COUSIN
  BOYFRIEND
  GIRLFRIEND
  OTHERS
}

enum Status {
  PENDING
  PROCESSING
  APPROVED
  DECLINED
  READY
  CLAIMED
}

enum Purok {
  PUROK_1
  PUROK_2
  PUROK_3
  PUROK_4
  PUROK_5
  PUROK_6
  PUROK_7
  PUROK_8
}
